generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://mwhxyigbywnfbn:28f0532ccfa11d6736bc8079db44724486c9679a6e2190a6cb375f05f0423811@ec2-34-194-100-156.compute-1.amazonaws.com:5432/ddo6pnpikd2ji3"
}

model guild {
  id         Int           @id @default(autoincrement())
  guildId    String        @unique @map("guild_id")
  joinedTime DateTime      @map("join_Time") @db.Timestamp(6)
  prefix     String        @default("g")
  member     member[]
  config     cofnigEntry[]
  counting  counting_data[]
  starboard_data starboard_data[]
}

model cofnigEntry {
  id      Int    @id @default(autoincrement())
  guild   guild  @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId String 
  module  String
  key     String
  value   String
  @@unique([guildId, module, key])
}

model member {
  id           Int           @id @default(autoincrement())
  guildid      String
  userid       String
  guild        guild         @relation(fields: [guildid], references: [guildId], onDelete: Cascade)
  deleted_msg  deleted_msg[]
  member_level member_level?

  @@unique([guildid, userid])
}

model member_level {
  memberID    String @map("user_id")
  guildID     String @map("guild_id")
  level       Int    @default(0)
  nextLevelXp Int    @default(100) @map("next_xp")
  xp          Int    @default(0)
  member      member @relation(fields: [memberID, guildID], references: [userid, guildid], onDelete: Cascade)

  @@id([memberID, guildID])
  @@unique([memberID, guildID])
}

model deleted_msg {
  id          Int      @id @default(autoincrement())
  author      String
  content     String
  guildId     String   @map("guild_id")
  msgTime     DateTime @map("msg_time") @db.Timestamp(6)
  channel     String
  deletedTime DateTime @map("del_time") @db.Timestamp(6)
  deletedBy   String   @map("del_by") @db.VarChar(200)
  msgId       String   @unique @map("msg_id")
  attachments Json?
  member      member   @relation(fields: [author, guildId], references: [userid, guildid], onDelete: Cascade)
}

model scheduled_task {
  id      Int      @id @default(autoincrement())
  task    String   @db.VarChar(255)
  context Json?    @db.Json
  time    DateTime @db.Timestamp(6)
  done    Boolean  @default(false)
}

model counting_data {
  id Int @id @default(autoincrement())
  guildid String @unique
  number Int @default(0)
  channel String
  user String 
  failrole String
  guild        guild         @relation(fields: [guildid], references: [guildId], onDelete: Cascade)
}

model starboard_data {
  id Int @id @default(autoincrement())
  guildid String @unique
  channel String
  invalid Boolean @default(false)
  emoji String[]
  allowNsfw Boolean
  minstars Int @default(1)
  guild        guild         @relation(fields: [guildid], references: [guildId], onDelete: Cascade)
}

model starred_msg {
  id Int @id @default(autoincrement())
  guildId String
  msgId String
  boardId String
}